---
/**
	# JDNavItem

	A component which renders the items which make up the JD-tree navigation bar.

	Each might be an area, category, or ID. It might be active, or not.

	This gets called pages^2 times: for every page, it gets called for every
  item in the navigation sidebar.
  */

interface Props {
  acid: "area" | "category" | "id"; // For indentation
  number: string; // For display
  title: string; // For display
  url: string; // Comes in as a simple string
}
const { number, title, url } = Astro.props;

/**
 * Are we generating a navitem for the current page?
 *
 * If the current path that Astro is rendering is the same as the URL passed
 * in by props then yes, this is the active page.
 *
 * Remember, each navitem is generated for each individual page on the site.
 */
const pathname = new URL(Astro.request.url).pathname;
const activePage = pathname.includes(url);
console.log("pathname:", pathname);
console.log("url:", url);
console.log("activePage:", activePage);

// What ACID type are we generating a navitem for?
import jdDetect from "@js/jdDetect";
const acid = jdDetect(number);

// Define the width of our nav block, in characters
const navwidth = 30;

/**
 * If we're on an activePage, we need to do some where-you-are-bar work.
 * If not, we just add spacing.
 *
 * We're going to generate an array of lines of text. Then the render section
 * just `map`s over them and pops them in <div>s.
 */

let navDivArray: Array<string> = [];

if (activePage) {
  console.log("🧬 acid:", acid);
  // Active page
  switch (acid) {
    case "area":
      /**
       * Create the first line.
       *
       * The first line has no preceding line art. It's the number, then as many
       * words from the title as we can fit.
       */
      let firstline = number;

      // Create an array from the title, from which we'll .shift() elements
      const titleArray = title.split(" ");

      while (
        titleArray[0] &&
        firstline.length + 1 + titleArray[0].length <= navwidth
      ) {
        firstline = firstline + " " + titleArray.shift();
      }

      console.log("🏁 firstline:", firstline);
      navDivArray.push(firstline);
      console.log("🗺️navDivArray:", navDivArray);
      // Is there more?

      break;

    default:
      break;
  }
} else {
  // Not active page
}
---

{
  /**
   * We need to create a component per AC.ID type of thing because each one
   * has a different class so the hanging indents work.
   *
   * So remember, again, each time this component renders it's just rendering
   * a single unit of navigation.
   */
}

<a href={url}>
  {
    navDivArray.map((navDiv) => {
      console.log("➗navDiv:", navDiv);
      return <div>{navDiv}</div>;
    })
  }
  <!-- {
    acid === "area" && (
      <div class={`jdnavitem jdarea ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  }

  {
    acid === "category" && (
      <div class={`jdnavitem jdcategory ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  }

  {
    acid === "id" && (
      <div class={`jdnavitem jdid ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  } -->
</a>

<style>
  .active {
    /* border: 2px solid red !important; */
  }

  .jdnavitem {
    /* background-color: rgb(240, 240, 240); */
    padding: 0.75rem;
  }

  /* Indentation and hanging paragraph -- leave these alone, put
	   borders elsewhere. */
  .jdarea {
    padding-left: 7ch;
    text-indent: -6ch;
  }
  .jdcategory {
    padding-left: 7ch;
    text-indent: -3ch;
  }
  .jdid {
    padding-left: 13ch;
    text-indent: -6ch;
  }

  .jdarea {
  }
  .jdcategory {
  }
  .jdid {
  }
</style>
