---
/**
 * ::CODE STINK ALERT::
 *
 * It took me ages to wrap my head around this thing, and this code is
 * horrendous. Please don't read it and please, please don't repurpose it.
 *
 * ::CODE STINK ALERT ENDS::
 *
 * # JDNavItem
 *
 * Each time JDNavItem is called, it is creating a `wyabItem` for a specific
 * page, `creatingWyabForThisPage`.
 *
 * ('wyab' = where-you-are-bar, the boxes-drawn-with-typeface-lines in the
 *  navigation area. I spent *way* too much time on this.)
 *
 * So if Astro is generating the page for `34 Category`, that's
 * `creatingWyabForThisPage`. For every `wyabItem` on that page, this sub will
 * be called once.
 */

interface Props {
  number: string; // For display
  title: string; // For display
  url: string; // Comes in as a simple string
}
const { number, title, url } = Astro.props;

/**
 * # Is the item in scope?
 *
 * We only consider drawing where-you-are-bar if the wyabIteb aka navItem is
 * 'in scope' of the page being created.
 *
 * If it *is* in scope then we have to figure out how it looks. But if it
 * isn't even in scope, there's nothing to draw.
 *
 * These rules are complex and are documented in the Excel file in {your JD
 * structure somewhere}.
 *
 * TODO: when you JD this stuff, put its location here.
 */

const isThisWyabItemInScopeOfThePageWeAreCreating = (): boolean => {
  console.log("");
  console.log("üîß isThisWyabItemInScopeOfThePageWeAreCreating()");
  const creatingWyabForThisPage = new URL(Astro.request.url).pathname.split(
    "/"
  );

  /**
   * Tidy up the creatingWyabForThisPage array.
   *
   * First element is blank due to leading zero; remove.
   *
   * The last element isn't blank when we're running in dev mode, but is when
   * we do a build. Detect if that's the case and remove it.
   */
  creatingWyabForThisPage.shift();
  if (creatingWyabForThisPage[creatingWyabForThisPage.length - 1] === "") {
    console.log("üöß Last element is blank; popping it off");
    creatingWyabForThisPage.pop();
  }

  // Do the same for the URL of the wyabItem.
  const wyabItem = url.split("/");
  wyabItem.shift();

  console.log("ü•Ö creatingWyabForThisPage:", creatingWyabForThisPage);
  console.log("ü•Ö wyabItem:", wyabItem);

  type JDItemType = "area" | "category" | "id" | "!!BROKEN!!";

  // The length of these arrays tells us the type of page we're creating.
  let creatingThisTypeOfPage: JDItemType = "!!BROKEN!!";
  switch (creatingWyabForThisPage.length) {
    case 1:
      creatingThisTypeOfPage = "area";
      break;
    case 2:
      creatingThisTypeOfPage = "category";
      break;
    case 3:
      creatingThisTypeOfPage = "id";
      break;
    default:
      break;
  }
  console.log("üéÉ creatingThisTypeOfPage:", creatingThisTypeOfPage);
  let wyabItemType: JDItemType = "!!BROKEN!!";
  switch (wyabItem.length) {
    case 1:
      wyabItemType = "area";
      break;
    case 2:
      wyabItemType = "category";
      break;
    case 3:
      wyabItemType = "id";
      break;
    default:
      break;
  }
  console.log("üéÉ wyabItemType:", wyabItemType);

  /**
   * Ref. Excel: if wyabItem is an area, it's in scope as long as the areas 
     are the same.
   */
  if (wyabItemType === "area") {
    return creatingWyabForThisPage[0] === wyabItem[0];
  }

  /**
   * If we're creating a wyab item for a category...
   */
  if (wyabItemType === "category") {
    /* If creatingWyabFor{Area}, a category can't be in scope. */
    if (creatingThisTypeOfPage === "area") {
      return false;
    }
    /**
     * Otherwise the rules are the same: the category number for the page we're
     * creating needs to be >= the category number of the wyab item, AND
     * they need to be in the same area.
     *
     * - Creating page 16, wyab is for 14. 16 >= 14 AND in same area, pass.
     * - Creating page 12.11, wyab is for 14. 12 !>= 14, fail.
     */

    /* Test for area first. */
    if (creatingWyabForThisPage[0] !== wyabItem[0]) {
      return false;
    }

    /**
     * The category number for the page we're creating needs to be >= the
     * category number of the wyab item. We've just ruled out areas not
     * matching, so at this point all wyabItems have a category at [1].
     */
    return creatingWyabForThisPage[1] >= wyabItem[1];
  }

  /**
   * By now we must be creating a wyab item for an ID...
   */
  if (wyabItemType === "id") {
    /* As above, creating for an area page is an easy fail. */
    if (creatingThisTypeOfPage === "area") {
      return false;
    }
  }

  /**
   * And again, the areas must match no matter what.
   */
  if (creatingWyabForThisPage[0] !== wyabItem[0]) {
    return false;
  }

  /**
   * If we're creating a category page, an ID wyab is in scope if the category
   * number for the page is > the wyab item.
   */
  if (creatingThisTypeOfPage === "category") {
    return creatingWyabForThisPage[1] > wyabItem[1];
  }

  /**
   * And finally if we're creating an ID page, an ID wyab is in scope if the
   * ID number of the page we're creating is >= the ID number of the wyab item.
   */
  if (creatingThisTypeOfPage === "id") {
    return creatingWyabForThisPage[2] >= wyabItem[2];
  }

  /**
   * We shouldn't be able to get here.
   */
  throw new Error("JDNavItem.astro: can't get there from here.");
};

const isInScope = isThisWyabItemInScopeOfThePageWeAreCreating();
console.log("ü•è isInScope:", isInScope);
---

{
  (
    <a class="jdNavRow" href={url}>
      <div class="area-number">{number}</div>
      <div class="area-title">
        {title} ({isInScope ? "‚úÖ" : "‚ùå"})
      </div>
    </a>
  )
}
<!-- 
{
  navItemACID === "area" && (
    <a class="jdNavRow" href={navItem}>
      <div class="area-number">{number}</div>
      <div class="area-title">{title}</div>
    </a>
  )
}

{
  navItemACID === "category" && (
    <a class="jdNavRow" href={navItem}>
      <div class="category-number">{number}</div>
      <div class="category-title">{title}</div>
    </a>
  )
}

{
  navItemACID === "id" && (
    <a class="jdNavRow" href={navItem}>
      <div class="id-spacer" />
      <div class="id-number">{number}</div>
      <div class="id-title">{title}</div>
    </a>
  )
} -->

<style>
  .active {
    color: red;
  }

  .jdNavRow {
    display: grid;
    gap: 1ch;
    grid-template-columns: 5ch 5ch auto;
    font-family: "Berkeley Mono";
    line-height: 150%;
    /* height: fit-content; */
  }

  .area-title,
  .category-title {
    grid-column: 2 / span 2;
  }

  .area-number,
  .category-number {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }

  .category-number {
    padding-left: 3ch;
  }
</style>
