---
/**
	# JDNavItem

	A component which renders the items which make up the JD-tree navigation bar.

	Each might be an area, category, or ID. It might be active, or not.

	They're probably going to end up being grid items but just add that as a CSS class later. (Although what's wrong with a bunch of <div>s?)

	# Constructing it
	So a JDNavItem is just a box with some text in it.

	If the item is an Area, just display {number} {title}.
	If it's a Category, indent by 3 spaces {'   '}.
	If it's an ID, indent by 6 spaces {'      '}.

	It links to the page that it represents.
  */

interface Props {
	number: string; // For display
	title: string; // For display
	acid: "area" | "category" | "id"; // For indentation
	active: boolean; // So we can temporarily disable stuff; default to `true`
	// TODO: fix the 'any' typing here
	url: any; // So we can use it in an <a href>
}

const { number, title, acid, active = true, url } = Astro.props;

/**
  Try this https://www.cyishere.dev/blog/astro-active-nav-item 'the Astro way'.

	Remember, when the site is generated, every page is statically rendered out.
	There is no runtime collation of components. Every page has the navigation
	section baked in. That section is created x times, where x is how many pages
	your site has. That's done here.

	So if you want a <div> to have an 'active' class, do the analysis and assign
	it here.

	This will work for browsers that have JS disabled, whereas the method which
	relies on script tags will not (and is more expensive).
  */
// const pathname = Astro.url.pathname; // Doesn't work on Netlify
const pathname = new URL(Astro.request.url).pathname;
// console.log("pathname", pathname);
// const currentPath = pathname.slice(1);
const currentPath = pathname.slice(1).replaceAll("/", "");
const urlNoSlash = url.slice(1).replaceAll("/", "");
console.log("currentPath", currentPath);
console.log("urlNoSlash", urlNoSlash);

// If currentPath === url, this is the active page.
console.log("currentPath === urlNoSlash?", currentPath === urlNoSlash);
---

{
	/* We need to create a component per AC.ID type of thing because each one
	  has a different class so the hanging indents work. */
}

<a href={url}>
	{
		acid === "area" && (
			<div
				class={`jdnavitem jdarea ${currentPath === urlNoSlash ? "active" : ""}`}
			>
				{number}&nbsp;{title}
			</div>
		)
	}

	{
		acid === "category" && (
			<div
				class={`jdnavitem jdcategory ${
					currentPath === urlNoSlash ? "active" : ""
				}`}
			>
				{number}&nbsp;{title}
			</div>
		)
	}

	{
		acid === "id" && (
			<div
				class={`jdnavitem jdid ${currentPath === urlNoSlash ? "active" : ""}`}
			>
				{number}&nbsp;{title}
			</div>
		)
	}
</a>

<style>
	.active {
		border: 2px solid red !important;
	}

	.jdnavitem {
		background-color: rgb(240, 240, 240);
		border: 1px solid black;
		border-collapse: collapse;
		font-family: "Berkeley Mono Trial";
		padding: 0.75rem;
	}

	.jdarea {
		padding-left: 7ch;
		text-indent: -6ch;
	}
	.jdcategory {
		padding-left: 7ch;
		text-indent: -3ch;
	}
	.jdid {
		padding-left: 13ch;
		text-indent: -6ch;
	}
</style>
