---
/**
	* # JDNavItem
  *
	* A component which renders the items which make up the JD-tree navigation bar.
  *
	* Each might be an area, category, or ID. It might be active, or not.
  *
	* This gets called pages^2 times: for every page, it gets called for every
  * item in the navigation sidebar.
  * 
  * JDNavContainer is a 2-column grid. JDNavItem needs to return it two divs:
  * 1. Left, containing a number and some where-you-are-bars.
  * 2. Right, the words.
  *

  */

interface Props {
  number: string; // For display
  title: string; // For display
  url: string; // Comes in as a simple string
}
const { number, title, url } = Astro.props;

/**
 * Are we generating a navitem for the current page?
 *
 * If the current path that Astro is rendering is the same as the URL passed
 * in by props then yes, this is the active page.
 *
 * Remember, each navitem is generated for each individual page on the site.
 const sitePage = new URL(Astro.request.url).pathname;
 console.log("");
 console.log("navItem:", navItem);
 console.log("sitePage:", sitePage);
 
 const navItemArray = navItem.split("/");
 const sitePageArray = sitePage.split("/");
 // Shift off the first member, it's just the blank string.
 navItemArray.shift();
 sitePageArray.shift();
 
 // What ACID type are we generating a navitem for?
 import jdDetect from "@js/jdDetect";
 const navItemACID = jdDetect(number);
 console.log("üß¨ navItemACID:", navItemACID);
 */

/**
 * ::CODE STINK ALERT::
 *
 * It took me ages to wrap my head around this thing, and this code is
 * horrendous. Please don't read it and please, please don't repurpose it.
 * This is *not* canonical JD-order testing of any order.
 *
 * ::CODE STINK ALERT ENDS::
 *
 * Each time JDNavItem is called, it is creating a `wyabItem` for a specific
 * page, `creatingWyabForThisPage`.
 *
 * So if Astro is generating the page for `34 Category`, that's
 * `creatingWyabForThisPage`. For every `wyabItem` on that page, this sub will
 * be called once.
 */

/**
 * # Is the item in scope?
 *
 * We only consider drawing where-you-are-bar if the wyabIteb aka navItem is
 * 'in scope' of the page being created.
 *
 * If it *is* in scope then we have to figure out how it looks. But if it
 * isn't even in scope, there's nothing to draw.
 *
 * These rules are complex and are documented in the Excel file in {your JD
 * structure somewhere}.
 *
 * TODO: when you JD this stuff, put its location here.
 */

const isThisWyabItemInScopeOfThePageWeAreCreating = () => {
  console.log("");
  console.log("üîß isThisWyabItemInScopeOfThePageWeAreCreating()");
  const creatingWyabForThisPage = new URL(Astro.request.url).pathname.split(
    "/"
  );
  // First element is blank due to leading zero; remove.
  creatingWyabForThisPage.shift();

  // Do the same for the URL of the wyabItem.
  const wyabItem = url.split("/");
  wyabItem.shift();

  // The length of this array tells us the type of page we're creating.
  let creatingWyabForThisTypeOfPage = "BROKEN ‚ÄºÔ∏è";
  switch (creatingWyabForThisPage.length) {
    case 1:
      creatingWyabForThisTypeOfPage = "area";
      break;
    case 2:
      creatingWyabForThisTypeOfPage = "category";
      break;
    case 3:
      creatingWyabForThisTypeOfPage = "id";
      break;
    default:
      break;
  }
  console.log(
    "üéÉ creatingWyabForThisTypeOfPage:",
    creatingWyabForThisTypeOfPage
  );

  /**
   * Ref. Excel: if wyabItem is an area, it's in scope as long as the areas 
     are the same.
   */
  if (creatingWyabForThisTypeOfPage === "area") {
    return creatingWyabForThisPage[0] === wyabItem[0];
  }
};

const isInScope = isThisWyabItemInScopeOfThePageWeAreCreating();
console.log("ü•è isInScope:", isInScope);
---

{
  (
    <a class="jdNavRow" href={url}>
      <div class="area-number">{number}</div>
      <div class="area-title">PH: {title}</div>
    </a>
  )
}
<!-- 
{
  navItemACID === "area" && (
    <a class="jdNavRow" href={navItem}>
      <div class="area-number">{number}</div>
      <div class="area-title">{title}</div>
    </a>
  )
}

{
  navItemACID === "category" && (
    <a class="jdNavRow" href={navItem}>
      <div class="category-number">{number}</div>
      <div class="category-title">{title}</div>
    </a>
  )
}

{
  navItemACID === "id" && (
    <a class="jdNavRow" href={navItem}>
      <div class="id-spacer" />
      <div class="id-number">{number}</div>
      <div class="id-title">{title}</div>
    </a>
  )
} -->

<style>
  .active {
    color: red;
  }

  .jdNavRow {
    display: grid;
    gap: 1ch;
    grid-template-columns: 5ch 5ch auto;
    font-family: "Berkeley Mono";
    line-height: 150%;
    /* height: fit-content; */
  }

  .area-title,
  .category-title {
    grid-column: 2 / span 2;
  }

  .area-number,
  .category-number {
    height: 0;
    min-height: 100%;
    overflow: hidden;
  }

  .category-number {
    padding-left: 3ch;
  }
</style>
