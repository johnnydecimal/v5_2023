---
/**
	# JDNavItem

	A component which renders the items which make up the JD-tree navigation bar.

	Each might be an area, category, or ID. It might be active, or not.

	Remem
  */

interface Props {
  acid: "area" | "category" | "id"; // For indentation
  number: string; // For display
  title: string; // For display
  url: string; // Comes in as a simple string
}
const { number, title, url } = Astro.props;

/**
 * Are we generating a navitem for the current page?
 *
 * If the current path that Astro is rendering is the same as the URL passed
 * in by props then yes, this is the active page.
 *
 * Remember, each navitem is generated for each individual page on the site.
 */
const pathname = new URL(Astro.request.url).pathname;
const activePage = pathname.includes(url);
console.log("pathname:", pathname);
console.log("url:", url);
console.log("activePage:", activePage);

// What ACID type are we generating a navitem for?
import jdDetect from "@js/jdDetect";
const acid = jdDetect(number);

// Define the width of our nav block, in characters
const navwidth = 30;

/**
 * Are we in an active area? If not, life's a lot simpler.
 *
 * This navitem might be for an AC or ID. Whatever it is, we need to know if
 * whatever page we're on is contained.
 *
 * We've got two values, and we need to use them to see if one is 'in' the
 * other.
 *
 * So first we need to work out if we're in an active area or not.
 */

const activeArea = () => {};

/**
 * # Area
 * If it's an area, construct the situation.
 *
 * We create an array of strings, then we just map them in to divs later.
 */

if (acid === "area") {
  let areaArray: Array<string> = [];

  /**
   * Create the first line.
   *
   * The first line has no preceding line art.
   */
  let firstline = number;

  // Create an array from the title, from which we'll .shift() elements
  const titleArray = title.split(" ");

  while (
    titleArray[0] &&
    firstline.length + 1 + titleArray[0].length <= navwidth
  ) {
    firstline = firstline + " " + titleArray.shift();
  }

  console.log("firstline:", firstline);

  // Is there more?
}
---

{
  /* We need to create a component per AC.ID type of thing because each one
	  has a different class so the hanging indents work. */
}

<a href={url}>
  {
    acid === "area" && (
      <div class={`jdnavitem jdarea ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  }

  {
    acid === "category" && (
      <div class={`jdnavitem jdcategory ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  }

  {
    acid === "id" && (
      <div class={`jdnavitem jdid ${activePage ? "active" : ""}`}>
        {number}&nbsp;{title}
      </div>
    )
  }
</a>

<style>
  .active {
    /* border: 2px solid red !important; */
  }

  .jdnavitem {
    /* background-color: rgb(240, 240, 240); */
    padding: 0.75rem;
  }

  /* Indentation and hanging paragraph -- leave these alone, put
	   borders elsewhere. */
  .jdarea {
    padding-left: 7ch;
    text-indent: -6ch;
  }
  .jdcategory {
    padding-left: 7ch;
    text-indent: -3ch;
  }
  .jdid {
    padding-left: 13ch;
    text-indent: -6ch;
  }

  .jdarea {
  }
  .jdcategory {
  }
  .jdid {
  }
</style>
