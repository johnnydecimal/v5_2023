---
/**
	# JDNavigation

	This will be the component that scrapes the site and returns a complete
	navigation section.

	We've already wrapped this in a <nav> up in <Layout>.

	# Sorting it

	See /doco/frontmatter.sort.md.
	*/

const pages = await Astro.glob("../../pages/**/*.md");

pages.sort(
	(a, b) =>
		// @ts-ignore
		(a.frontmatter.sort > b.frontmatter.sort) -
		// @ts-ignore
		(a.frontmatter.sort < b.frontmatter.sort)
);

import JDNavItem from "./JDNavItem.astro";

/**
  Building the highlighting of the active JDNavItem.

  Ah now remember, this whole thing is statically generated. So on this page,
	where you're building the *static* HTML that will be deployed, you can't
	possibly know which is the active route.
  */
// console.log(Astro.url);
---

{
	/* Make me an <ol>? So don't forget to make JDNavItem return <li>. */
	pages.map((page) => (
		<JDNavItem
			number={page.frontmatter.number}
			title={page.frontmatter.title}
			acid={page.frontmatter.acid}
			active={page.frontmatter.active}
			url={page.url}
		/>
	))
}

// <script>
	// 	// Give the active link an 'active' class.
	// 	// https://www.cyishere.dev/blog/astro-active-nav-item
	// 	const navLinks = document.querySelectorAll(".jdnavigation a");
	//
	// 	navLinks.forEach((link) => {
	// 		link.classList.remove("active");
	//
	// 		// `slice` here to remove the first `/` in pathname
	// 		const currentPath = window.location.pathname.slice(1);
	// 		console.log("currentPath:", currentPath);
	//
	// 		// `link.href` returns a whole url, such as: "https://somedomain.com/posts" and we only need the last part
	// 		// @ts-ignore
	// 		const hrefArray = link.href.split("/");
	// 		const thisPath = hrefArray[hrefArray.length - 1];
	// 		console.log("thisPath:", thisPath);
	//
	// 		if (currentPath === thisPath) {
	// 			link.classList.add("active");
	// 		}
	// 	});
	//
</script>

<style>
	.jdnavigation {
		border: 2px solid black;
	}
</style>
