---
/**
 * `text`: the text to render. Will be split in to an array of strings.
 * `classArray`: an array of strings. [0] for the first line, [n] for the last.
 * `options`: TBC.
 */
interface Props {
  text: string;
  classArray?: Array<string>;
  options?: any;
}

const { text, classArray = [], options } = Astro.props;

/**
 * Split `text` in to an array of strings. Each is a line for further
 * processing.
 */
import { textToArrayOfStrings } from "./jdBlockFunctions";
const textAsArrayOfStrings = textToArrayOfStrings(text);

/**
 * We have `textAsArrayOfStrings`, and `classArray` which is already
 * an array of class strings. Construct the `arrayToRender`.
 */
import { constructArrayToRender } from "./jdBlockFunctions";
const arrayToRender = constructArrayToRender(textAsArrayOfStrings, classArray);
---

<div class="JDBlock">
  {
    arrayToRender.map((line) => {
      console.log(line.text);
      return <pre class:list={line.classes}>{line.text}</pre>;
    })
  }
</div>

<style lang="scss">
  @use "/src/styles/johnny" as *;

  .JDBlock {
    background-color: $jd-bg-colour;
    color: $offwhite;
    border: 1px solid $jd-highlight-colour;

    padding: 1rem;

    width: fit-content;

    & pre {
      white-space: pre-wrap;
      margin: 0;

      font-family: $monospace;

      &.hanging-indent {
        padding-left: 3ch;
        text-indent: -3ch;
      }

      &.space {
        min-height: 1.5rem;
      }

      &.a {
        font-weight: bold;
      }

      &.c {
      }

      &.id {
      }
    }
  }
</style>
